✅ Purpose of the Program
To check whether a given number n is prime or not, by counting its number of divisors.
--------------------------------------------------------------------------------------
✅ Key Concept: Prime Number
A number n is called prime if:
It is greater than 1
It has exactly 2 positive divisors: 1 and itself
--------------------------------------------------------------------------------------
✅ Logic Used in Code

for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
        c++; // count divisor i
        if (n / i != i) {
            c++; // count divisor n/i if it's different
        }
    }
}
--------------------------------------------------------------------------------------
The loop runs from 1 to √n.
If i divides n, then both i and n/i are counted as divisors.
For perfect squares, we avoid counting i twice when i == n/i.
--------------------------------------------------------------------------------------
✅ Code Summary

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n = 23;
    int c = 0;
    for (int i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            c++;
            if (n / i != i) {
                c++;
            }
        }
    }
    if (c == 2) {
        cout << "p"; // Prime
    } else {
        cout << "n"; // Not prime
    }
}
--------------------------------------------------------------------------------------
✅ Output
Prints 'p' if n is prime.
Prints 'n' if n is not prime.
--------------------------------------------------------------------------------------
✅ Example
For n = 23:
Divisors = 1 and 23
c = 2
Output: p
--------------------------------------------------------------------------------------
✅ Time Complexity
The loop runs from 1 to √n.
Each divisor check takes constant time.
Time Complexity: O(√n)
--------------------------------------------------------------------------------------
✅ Space Complexity
Only uses a few variables (n, c, i)
Space Complexity: O(1)
--------------------------------------------------------------------------------------
✅ Conclusion
This is an efficient method to:
Count the number of divisors up to √n
Check for primality without unnecessary iterations
