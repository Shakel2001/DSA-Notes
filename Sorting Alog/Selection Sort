Selection Sort is a simple sorting algorithm that repeatedly:
Finds the minimum element from the unsorted part,
And swaps it with the first unsorted element.
---------------------------------------------------------------
üîÅ Selection Sort Logic:
For an array of size n:
For each position i from 0 to n-2:
Find the index of the minimum element from i to n-1
Swap it with the element at index i
---------------------------------------------------------------
üß† Step-by-Step Example
Input:
arr = [64, 25, 12, 22, 11]
Iterations:
Step	Array	Explanation
i=0	[11, 25, 12, 22, 64]	11 is min from index 0 to 4, swap with 64
i=1	[11, 12, 25, 22, 64]	12 is min from index 1 to 4
i=2	[11, 12, 22, 25, 64]	22 is min from index 2 to 4
i=3	[11, 12, 22, 25, 64]	Already sorted
i=4	[11, 12, 22, 25, 64]	Done

Output:

[11, 12, 22, 25, 64]

---------------------------------------------------------------
‚úÖ C++ Code (Selection Sort)

#include <iostream>
using namespace std;

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;

        // Find index of minimum element in the unsorted part
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }

        // Swap the found minimum with the first unsorted element
        swap(arr[i], arr[minIdx]);
    }
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};
    int n = 5;

    selectionSort(arr, n);

    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
}
---------------------------------------------------------------
üìò Notes
Property	Description
In-place	‚úÖ Yes (no extra space used)
Stable	‚ùå No (relative order may change)
Adaptive	‚ùå No (doesn't improve on sorted data)
Easy to implement	‚úÖ Yes
---------------------------------------------------------------

‚è±Ô∏è Time and Space Complexity
Case	Time Complexity	Reason
Best Case	O(n¬≤)	Still needs to check all elements
Average	O(n¬≤)	
Worst Case	O(n¬≤)	
Space	O(1)	No extra memory used
---------------------------------------------------------------

‚úÖ When to Use:
When array size is small
When memory usage must be minimal
When you want a simple sorting logic

