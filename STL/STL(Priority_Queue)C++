📘 What is priority_queue?
A container adapter in STL that provides fast access to the highest (or lowest) priority element.
----------------------------------------------------------------------------
Internally implemented using a heap:
Max-heap by default (largest element on top).
Can be made a min-heap using a comparator.
----------------------------------------------------------------------------
📂 Header File
#include <queue>
----------------------------------------------------------------------------
📌 Declaration
🔹 Max-Heap (default):
priority_queue<int> pq; // Top element is the greatest
🔹 Min-Heap:
priority_queue<int, vector<int>, greater<int>> pq_min; // Top element is the smallest
----------------------------------------------------------------------------
🧩 Common Operations & Time Complexities
Operation	Syntax	Time Complexity
Insert element	pq.push(x);	O(log N)
Remove top	pq.pop();	O(log N)
Access top	pq.top();	O(1)
Check size	pq.size();	O(1)
Check empty	pq.empty();	O(1)
----------------------------------------------------------------------------
🔁 Max-Heap Example

#include <iostream>
#include <queue>
using namespace std;

int main() {
    priority_queue<int> pq;

    pq.push(10);
    pq.push(5);
    pq.push(20);

    while (!pq.empty()) {
        cout << pq.top() << " ";  // Output: 20 10 5
        pq.pop();
    }

    return 0;
}
----------------------------------------------------------------------------
🔁 Min-Heap Example

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> pq;

    pq.push(10);
    pq.push(5);
    pq.push(20);

    while (!pq.empty()) {
        cout << pq.top() << " ";  // Output: 5 10 20
        pq.pop();
    }

    return 0;
}
----------------------------------------------------------------------------
🔧 Custom Objects in priority_queue (Advanced)

struct Student {
    int marks;
    string name;
    bool operator<(const Student &s) const {
        return marks < s.marks; // Max-heap based on marks
    }
};
----------------------------------------------------------------------------
priority_queue<Student> pq;
🧠 When to Use priority_queue
Use it when you want quick access to:
Highest priority element (max-heap)
Lowest priority element (min-heap)
Top K largest/smallest items
----------------------------------------------------------------------------
🔍 Common Use-Cases
Dijkstra’s algorithm (shortest path)
Huffman encoding
Task or job scheduling
Online stream processing (Top K elements)
